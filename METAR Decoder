import requests
import calendar
import math
from bs4 import BeautifulSoup
from datetime import datetime
from sys import exit
import tkinter as tk

popup = tk.Tk()

popup.withdraw()
popup.lift()

stat = tk.simpledialog.askstring("ASOS/AWOS Weather Data","Enter a station ID to get weather data.\t\t\t")


stat = str.lower(stat)
if len(stat)==4:
    stat=stat
else:
    stat = 'k'+stat


if len(stat)!=4:
    print ("Invalid input")
    exit()

URL = 'https://www.aviationweather.gov/metar/data?ids='+stat+'&format=raw&hours=0&taf=on&layout=on'#Change IDS for side reading

page = requests.get(URL)

soup = BeautifulSoup(page.content, 'html.parser')
data = str(soup.find('code'))
results = data[10:1000]
resultsnew = data[(results.find('RMK')):1000]
if 'AUTO' in results:
    resnoday = results[14:1000]
else:
    resnoday = results[9:1000]

#print(resnoday)
#print(results)

#Station ID
loca = str(data[6:10])

#Type of Observer

if 'AUTO' in results:
    Auto = 'Automated OBS'
else:
    Auto = 'Human OBS'


#Time of Obs

TimeS = results.find('Z')-4
TimeE = results.find('Z')-0

try:
    int(results[TimeS:TimeE])
except ValueError:
    print(str('Invalid Station ID'))
    exit()


TimeRaw = round(int(results[TimeS:TimeE]),-2)

Time = TimeRaw
if TimeRaw <=1000:
    Time = (str(TimeRaw).zfill(4))
elif TimeRaw == 2400:
    Time = '0000'
#Date of Obs
Date = datetime.today()
Month = Date.strftime("%B")
Weekday = calendar.day_name[Date.weekday()]
Day = int(Date.strftime("%d"))

if Day == 1:
    prefix = 'st'
elif Day == 2:
    prefix = 'nd'
elif Day == 3:
    prefix = 'rd'
elif Day in range(4,21):
    prefix = 'th'
elif Day == 21:
    prefix = 'st'
elif Day == 22:
    prefix = 'nd'
elif Day == 23:
    prefix = 'rd'
elif Day in range(24,31):
    prefix = 'th'
elif Day == 31:
    prefix = 'st'


day = str(results[1:3])

clocktime = datetime.now()
hour = int((clocktime.strftime('%H')))
if hour >12:
    hr = hour-12
else:
    hr = hour
Min = (clocktime.strftime('%M'))

if hour <12:
    meridiem = "AM"
else:
    meridiem = "PM"

#Pressure

Pstart = results.find('SLP')+3
Pend = results.find('SLP')+6

prsraw = int(results[Pstart:Pend])

if prsraw >500:
    prs = ((prsraw*10**-1)+900)
else:
    prs = ((prsraw*10**-1)+1000)

#Temperature

TempS = resultsnew.find('T')+1
TempE = resultsnew.find('T')+5
#print(resultsnew[TempS:TempE])

TempRaw = int(resultsnew[TempS:TempE])
if TempRaw <1000:
    TempC=(TempRaw/10)
else:
    TempC=((TempRaw-1000)/-10)
Temp = round((TempC*(9/5)+32))
CTemp = round(TempC)

#Dew Point

DewS = resultsnew.find('T')+5
DewE = resultsnew.find('T')+9
DewRaw = int(resultsnew[DewS:DewE])
if DewRaw <1000:
    DewC=(DewRaw/10)
else:
    DewC=((DewRaw-1000)/-10)
Dew = round((DewC*(9/5)+32))
CDew = round(DewC)

#Relative Humidity
TempK = TempC+273
DewK = DewC+273

e= 6.11*(math.exp((5321.041215)*((1/273)-(1/DewK))))
es= 6.11*(math.exp((5321.041215)*((1/273)-(1/TempK))))
Rh = round((e/es)*100)

#Wind Speed

wspeed = int(resnoday[3:5])

WindSRaw = wspeed
WindS = round(WindSRaw*1.15078)

#Wind Gust

GustfindS = resnoday.find('KT')-3
GustfindE = resnoday.find('KT')-2

GustQ = str(resnoday[GustfindS:GustfindE])
if 'G' in GustQ:
    GustS = resnoday.find('G')+1
    GustE = resnoday.find('G')+3
    GustRaw = int(resnoday[GustS:GustE])
    Gust = round(GustRaw*1.15078)
else:
    Gust = 'None'


#Wind Direction

Dir = int(resnoday[0:3])


while True:
    try:
        WindDRaw = Dir
        #WindDRaw = int('VRB')
    except ValueError:
        WindD = "Variable"
        break



    if WindDRaw in range(0,11):#North
        WindD = "N"
    elif WindDRaw in range(11,35):#NNE
            WindD = "NNE"
    elif WindDRaw in range(35,56):#NE
            WindD = "NE"
    elif WindDRaw in range(56,80):#ENE
            WindD = "ENE"
    elif WindDRaw in range(80,101):#East
            WindD = "E"
    elif WindDRaw in range(101,125):#ESE
            WindD = "ESE"
    elif WindDRaw in range(125,146):#SE
            WindD = "SE"
    elif WindDRaw in range(146,170):#SSE
            WindD = "SSE"
    elif WindDRaw in range(170,191):#South
            WindD = "S"
    elif WindDRaw in range(191,215):#SSW
            WindD = "SSW"
    elif WindDRaw in range(215,236):#SW
            WindD = "SW"
    elif WindDRaw in range(236,260):#WSW
            WindD = "WSW"
    elif WindDRaw in range(260,281):#West
            WindD = "W"
    elif WindDRaw in range(281,305):#WNW
            WindD = "WNW"
    elif WindDRaw in range(305,326):#NW
            WindD = "NW"
    elif WindDRaw in range(326,350):#NNW
            WindD = "NNW"
    elif WindDRaw in range(350,361):#North
            WindD = "N"
    break

#Feel Like Temps
FeelC=0
if Temp >= 50 and Dew <50:
    Feel = Temp
elif Temp <50:#WindChill
    Feel = round(35.74 + (0.6215*Temp)-(35.74*WindS**0.16)+(0.4275*Temp*WindS**0.16))
elif Dew >=60:#Heat Index
    HI = ((-42.379) + (2.04901523*Temp) + (10.14333127*Rh) - 
          (0.22475541*Temp*Rh)-(0.00683783*Temp*Temp)-
          (0.05481717*Rh*Rh)+(0.00122874*Temp*Temp*Rh)+
          (0.00085282*Temp*Rh*Rh)-(0.00000199*Temp*Temp*Rh*Rh))
    if HI < 80:
        HI = 0.5*(Temp+61+((Temp-68)*1.2)+(Rh*0.094))
        print('It aint that bad')
    elif Rh<13 and Temp in range (80,113):
        HI -((13-Rh)/4)*(math.sqrt((17-(abs(Temp-95)))/17))
        print('Just a Dry Heat')
    elif Rh>85 and Temp in range (80,88):
        HI + (((Rh-85)/10)*((87-Temp)/5))
        print('MUGGY AS FUCK')
    else:
        print('Its Humid As Fuck BOI!')
        Feel=round(HI)
FeelC = (((Feel-32)*(5/9)))

#Visibility

VisS = results.find('SM')-2
VisE = results.find('SM')-0
Vis = int(results[VisS:VisE])

#Sky

skyS = results.find('SM')+3
skyE = results.find('SM')+6
skyRaw = str(results[skyS:skyE])

if skyRaw == 'CLR':
    sky = 'Clear Skies'
elif skyRaw == 'FEW':
    sky = "Partly Cloudy"
elif skyRaw == 'SCT':
    sky = "Scattered Clouds"
elif skyRaw == 'BKN':
    sky = "Broken Clouds"
elif skyRaw == 'OVC':
    sky = "Overcast Skies"

celS = results.find('SM')+6
celE = results.find('SM')+10
if skyRaw == 'CLR':
    celR = 0
else:
    celR = int(results[celS:celE])
    if celR <100:
        cel = celR*100

    else:
        cel = celR/10


#Print METAR

#print("___________________________________________________")
#print(results)
#print("___________________________________________________")
#print("")
print("___________________________________________________")
print("___________________________________________________")
print("")
print("Local Time:",'%d:%s'%(hr,Min),meridiem, Weekday,Month,'%d%s'%(Day,prefix))
print("")
print("Site:",loca)
print("")
if celR == 0:
    print("Sky:", sky)
elif cel <1000:
    print("Sky:", sky, "at", '%dkft' %cel)
else:
    print("Sky:", sky, "at", '%dft' %cel)
print("Temp:",'%d\N{DEGREE SIGN}' "F" %Temp, '(%d\N{DEGREE SIGN}C)' %CTemp)
print("Feels Like:",'%d\N{DEGREE SIGN}' "F" %Feel, '(%d\N{DEGREE SIGN}C)' %FeelC)
print("DewPt:",'%d\N{DEGREE SIGN}' "F" %Dew,'(%d\N{DEGREE SIGN}C)' %CDew)
print("Humidity:",'%d%%' %Rh)
print("Wind:", WindD, '%d MPH' %WindS)
if Gust == 'None':
    print("Gusts:", "None Observed")
else:
    print("Gusts:",Gust, "MPH")
print("SLP:",prs,"mb")
print("Vis:", Vis, "Miles")
print("")
print("Updated:",Month,day,'%s Z' %Time)
print("Report Type:",Auto)
print("___________________________________________________")
print("___________________________________________________")
print("")

#print(results)
