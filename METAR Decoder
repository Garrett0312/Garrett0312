import requests
import calendar
import math
from bs4 import BeautifulSoup
from datetime import datetime
from sys import exit
import tkinter as tk
from tkinter import simpledialog

popup = tk.Tk()

popup.withdraw()
stat = simpledialog.askstring(title="Weather",
                                  prompt="Enter a Wx Station ID")
stat = str.lower(stat)
if 'k' in stat:
    stat=stat
else:
    stat = 'k'+stat

if len(stat)!=4:
    print ("Invalid input")
    exit()

URL = 'https://www.aviationweather.gov/metar/data?ids='+stat+'&format=raw&hours=0&taf=on&layout=on'#Change IDS for side reading
page = requests.get(URL)

soup = BeautifulSoup(page.content, 'html.parser')
data = str(soup.find('code'))
results = data[10:1000]


#Station ID
loca = str(data[6:10])

#Type of Observer

if 'AUTO' in results:
    Auto = 'Automated OBS'
else:
    Auto = 'Human OBS'


#Time of Obs

TimeS = results.find('Z')-4
TimeE = results.find('Z')-0

try:
    int(results[TimeS:TimeE])
except ValueError:
    print(str('Invalid Station ID'))
    exit()


TimeRaw = round(int(results[TimeS:TimeE]),-2)

Time = TimeRaw
if TimeRaw <=1000:
    Time = (str(TimeRaw).zfill(4))
elif TimeRaw == 2400:
    Time = '0000'
#Date of Obs
Date = datetime.today()
Month = Date.strftime("%B")
Weekday = calendar.day_name[Date.weekday()]
Day = int(Date.strftime("%d"))

if Day == 1:
    prefix = 'st'
elif Day == 2:
    prefix = 'nd'
elif Day == 3:
    prefix = 'rd'
elif Day in range(4,21):
    prefix = 'th'
elif Day == 21:
    prefix = 'st'
elif Day == 22:
    prefix = 'nd'
elif Day == 23:
    prefix = 'rd'
elif Day in range(24,31):
    prefix = 'th'
elif Day == 31:
    prefix = 'st'


day = str(results[1:3])

clocktime = datetime.now()
hour = int((clocktime.strftime('%H')))
Min = (clocktime.strftime('%M'))

if hour <12:
    meridiem = "AM"
else:
    meridiem = "PM"

#Pressure

Pstart = results.find('SLP')+3
Pend = results.find('SLP')+6

prsraw = int(results[Pstart:Pend])

if prsraw >500:
    prs = ((prsraw*10**-1)+900)
else:
    prs = ((prsraw*10**-1)+1000)

#Temperature

TempS = results.find('SLP')+8
TempE = results.find('SLP')+12
TempRaw = int(results[TempS:TempE])
if TempRaw <1000:
    TempC=(TempRaw/10)
else:
    TempC=((TempRaw-1000)/-10)
Temp = round((TempC*(9/5)+32))
CTemp = round(TempC)

#Dew Point

DewS = results.find('SLP')+12
DewE = results.find('SLP')+16
DewRaw = int(results[DewS:DewE])
if DewRaw <1000:
    DewC=(DewRaw/10)
else:
    DewC=((DewRaw-1000)/-10)
Dew = round((DewC*(9/5)+32))
CDew = round(DewC)

#Relative Humidity
TempK = TempC+273
DewK = DewC+273

e= 6.11*(math.exp((5321.041215)*((1/273)-(1/DewK))))
es= 6.11*(math.exp((5321.041215)*((1/273)-(1/TempK))))
Rh = round((e/es)*100)

#Wind Speed

if 'AUTO' in results:
    WindSS = results.find('AUTO')+8
    WindSE = results.find('AUTO')+10
else:
    WindSS = results.find('Z')+5
    WindSE = results.find('Z')+7

WindSRaw = int(results[WindSS:WindSE])
WindS = round(WindSRaw*1.15078)

#Wind Gust

GustfindS = results.find('KT')-3
GustfindE = results.find('KT')-2

GustQ = str(results[GustfindS:GustfindE])
if 'G' in GustQ:
    GustS = results.find('G')+1
    GustE = results.find('G')+3
    GustRaw = int(results[GustS:GustE])
    Gust = round(GustRaw*1.15078)
else:
    Gust = 'None'


#Wind Direction

if 'AUTO' in results:
    WindDS = results.find('AUTO')+5
    WindDE = results.find('AUTO')+8
else:
    WindDS = results.find('Z')+2
    WindDE = results.find('Z')+5



while True:
    try:
        WindDRaw = int(results[WindDS:WindDE])
        #WindDRaw = int('VRB')
    except ValueError:
        WindD = "Variable"
        break



    if WindDRaw in range(0,10):#North
        WindD = "N"
    elif WindDRaw in range(11,34):#NNE
            WindD = "NNE"
    elif WindDRaw in range(35,55):#NE
            WindD = "NE"
    elif WindDRaw in range(56,79):#ENE
            WindD = "ENE"
    elif WindDRaw in range(80,100):#East
            WindD = "E"
    elif WindDRaw in range(101,124):#ESE
            WindD = "ESE"
    elif WindDRaw in range(125,145):#SE
            WindD = "SE"
    elif WindDRaw in range(146,169):#SSE
            WindD = "SSE"
    elif WindDRaw in range(170,190):#South
            WindD = "S"
    elif WindDRaw in range(191,214):#SSW
            WindD = "SSW"
    elif WindDRaw in range(215,235):#SW
            WindD = "SW"
    elif WindDRaw in range(236,259):#WSW
            WindD = "WSW"
    elif WindDRaw in range(260,280):#West
            WindD = "W"
    elif WindDRaw in range(281,304):#WNW
            WindD = "WNW"
    elif WindDRaw in range(305,325):#NW
            WindD = "NW"
    elif WindDRaw in range(326,349):#NNW
            WindD = "NNW"
    elif WindDRaw in range(350,360):#North
            WindD = "N"
    break


#Visibility

VisS = results.find('SM')-2
VisE = results.find('SM')-0
Vis = int(results[VisS:VisE])

#Sky

skyS = results.find('SM')+3
skyE = results.find('SM')+6
skyRaw = str(results[skyS:skyE])

if skyRaw == 'CLR':
    sky = 'Clear Skies'
elif skyRaw == 'FEW':
    sky = "Partly Cloudy"
elif skyRaw == 'SCT':
    sky = "Scattered Clouds"
elif skyRaw == 'BKN':
    sky = "Broken Clouds"
elif skyRaw == 'OVC':
    sky = "Overcast Skies"

celS = results.find('SM')+6
celE = results.find('SM')+10
if skyRaw == 'CLR':
    celR = 0
else:
    celR = int(results[celS:celE])
    if celR <100:
        celh = celR*100
        cel = 'A'
    else:
        cel = celR/10
        celh = 'A'

#Print METAR

print("")
print("Local Time:",'%d:%s'%(hour,Min),meridiem, Weekday,Month,'%d%s'%(Day,prefix))
print("")
print("Site:",loca)
print("")
if celR == 0:
    print("Sky:", sky)
elif celh == 'A':
    print("Sky:", sky, "at", '%dkft' %cel)
elif cel == 'A':
    print("Sky:", sky, "at", '%dft' %celh)
print("Temp:",'%d\N{DEGREE SIGN}' "F" %Temp, '(%d\N{DEGREE SIGN}C)' %CTemp)
print("DewPt:",'%d\N{DEGREE SIGN}' "F" %Dew,'(%d\N{DEGREE SIGN}C)' %CDew)
print("Humidity:",'%d%%' %Rh)
print("Wind:", WindD, '%d MPH' %WindS)
if Gust == 'None':
    print("Gusts:", "None Observed")
else:
    print("Gusts:",Gust, "MPH")
print("SLP:",prs,"mb")
print("Vis:", Vis, "Miles")
print("")
print("Updated:",Month,day,'%s Z' %Time)
print("Report Type:",Auto)
print("")

#print(results)
